{"version":3,"file":"static/js/287.4be96a53.chunk.js","mappings":"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","sources":["components/Cast/Cast.js","components/Error/Error.js","components/Section/Section.js","services/tmdb-api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport * as Api from '../../services/tmdb-api';\nimport { useParams } from 'react-router';\nimport Loader from 'components/Loader/Loader';\nimport Section from 'components/Section/Section';\nimport Rejected from 'components/Error/Error';\n\nimport brokenImage from '../../images/broken_img.png';\n\nimport './Cast.css';\n\nconst Status = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    RESOLVED: 'resolved',\n    REJECTED: 'rejected',\n  }\n\n  const Cast = () => {\n    const {movieId} = useParams();\n    const [cast, setCast] = useState([]);\n    const [status, setStatus] = useState(Status.IDLE);\n\n    useEffect(() => {\n        setStatus(Status.PENDING);\n        Api.fetchMovieCredits(movieId).then(item => {\n            setCast(item);\n            setStatus(Status.RESOLVED);\n        })\n        .catch(error => {\n            console.log(error);\n            setStatus(Status.REJECTED);\n        })\n    },[movieId]);\n\n    if (status === Status.PENDING) {\n        return <Loader />\n    }\n\n    if (status === Status.REJECTED) {\n        return (\n            <Section>\n                <Rejected />\n            </Section>\n        );\n    }\n\n    if (status === Status.RESOLVED) {\n        return (\n                <Section>\n                    <ul className='cast__list'>\n                        {cast.map((item, index) => {\n                            return (\n                                <li className='cast__item' key={index}>\n                                    <div className='cast__photo'>\n                                        {item.profile_path? \n                                        (<img\n                                            src={`https://image.tmdb.org/t/p/w300${item.profile_path}`}\n                                            alt={`${item.name}`}\n                                        >\n                                        </img>)\n                                        : \n                                        (<img\n                                            src={brokenImage}\n                                            alt={`${item.name}`}\n                                        >\n                                        </img>)}\n                                    </div>\n                                    <div className='cast__content'>\n                                        <h3>Name: {item.name}</h3>\n                                        <p>Character: {item.character}</p>\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </Section>\n             );\n    }\n\n  }\n\n  export default Cast;","import './Error.css';\n\nconst Rejected = () => {\n    return <div className='error__text'>Ooops. Something went wrong;(</div>;\n}\n\nexport default Rejected;","import PropTypes from 'prop-types';\n\nimport './Section.css';\n\nconst Section = (props) => {\n    return (\n        <section className='section'>\n            <div className='container'>\n                {props.children}\n            </div>\n        </section>\n    );\n}\n\nSection.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport default Section;","import axios from \"axios\";\n\nconst AXIOS = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n      api_key: 'e38902030017580fbfa1d8a473a3610b',\n      language: 'en-US',\n    },\n  });\n\n  async function fetchTrendingMovies() {\n    return await AXIOS.get(`trending/all/day`).then(res => res.data);\n  }\n\n  async function searchMovie(inputSearch) {\n    return await AXIOS.get(`/search/movie?query=${inputSearch}&page=1`).then(res => res.data);\n  }\n\n  async function fetchAboutMovie(movieId) {\n    return await AXIOS.get(`movie/${movieId}?`).then(res => res.data);\n  }\n\n  async function fetchMovieCredits(movieId) {\n    return await AXIOS.get(`movie/${movieId}/credits?`).then(res => res.data.cast);\n  }\n\n  async function fetchMovieReviews(movieId) {\n    return await AXIOS.get(`movie/${movieId}/reviews?`).then(res => res.data.results);\n  }\n\n  export {\n    fetchTrendingMovies,\n    searchMovie,\n    fetchAboutMovie,\n    fetchMovieCredits,\n    fetchMovieReviews,\n  }"],"names":["Status","movieId","useParams","useState","cast","setCast","status","setStatus","useEffect","Api","then","item","catch","error","console","log","Loader","Section","className","map","index","profile_path","src","alt","name","brokenImage","character","props","children","AXIOS","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","res","data","searchMovie","inputSearch","fetchAboutMovie","fetchMovieCredits","fetchMovieReviews","results"],"sourceRoot":""}